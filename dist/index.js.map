{"version":3,"file":"index.js","mappingseA;AAIA;AAIA;AAIA;AAIA;AAKA;AAMA;AAMA;AAMA;AAOA;AAOA;AAQA;AASA;AAQA;AAOA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AAAA;AACA;AACA;AAMA;AACA;AAAA;AACA;AACA;AAMA;AACA;AAAA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AAAA;AACA;AACA;AAQA;AACA;AACA;AAOA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAKA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AClTA;AACA;AAqBA;AASA;AAIA;AAIA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAUA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AC1KA;AAEA;AACA;AACA;AAEA;AAIA;AAIA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AAUA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AAUA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;ACvFA;AACA;AACA;AAUA;AAQA;AAIA;AAIA;AAIA;AAMA;AAKA;AAOA;AAOA;AAOA;AAKA;AAIA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAQA;AACA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAYA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7BA;AAEA","sources":[".././src/class/config.ts",".././src/class/github.ts",".././src/class/main.ts",".././src/class/tag.ts","../webpack/bootstrap",".././src/index.ts"],"sourcesContent":["import { env } from 'node:process';\nimport { fileURLToPath, pathToFileURL } from 'node:url';\nimport { dirname, normalize, join } from 'node:path';\nimport { existsSync, readFileSync } from 'node:fs';\nimport { getInput, getBooleanInput, setFailed, info } from '@actions/core';\n//\nimport type { ReleaseTypeT } from '../types';\nimport type { PackageJson } from 'type-fest';\n\n/**\n * Basic configure class\n * Get from class:\n * * `root` - Node project root directory\n * * `token` - Github Action input token\n * * `version` - Node project version from package.json file\n * * `prefix` - Custom Prefix for version\n * * `postfix` - Custom Postfix for version\n * * `dryrun` - Push or not push new tag to repo\n */\nclass Config {\n  /**\n   * Path to root action dir\n   */\n  private readonly rootPath: string;\n  /**\n   * JSON data object from package.json file\n   */\n  private readonly packageJsonData: PackageJson | null;\n  /**\n   * Default version if not found version in package.json file\n   */\n  private readonly defaultVersion: string = '0.1.0';\n  /**\n   * `REQUIRED` Token from Github Action Inputs\n   */\n  private readonly _inputToken: string;\n  /**\n   * `OPTIONAL` Version from Github Action Inputs\n   * Example: `1.0.0`\n   */\n  private _inputVersion: string;\n  /**\n   * `OPTIONAL` Prefix from Github Action Inputs\n   * Example: `v`\n   * Result example: `v1.0.0`\n   */\n  private readonly _inputPrefix: string;\n  /**\n   * `OPTIONAL` Postfix from Github Action Inputs\n   * Example: `beta`\n   * Result example: `v1.0.0-beta.0`\n   */\n  private readonly _inputPostfix: string;\n  /**\n   * Do not apply version upgrade to postfix.\n   * No number will be added to the postfix.\n   * Example: `v1.0.0-beta`, `2.5.1-rc`\n   */\n  private readonly _inputPostfixNoUpgrade: boolean;\n  /**\n   * `OPTIONAL` Additional metadata for tag\n   * If boolean `true`. Trim SHA commit\n   * Example: `fyf2c5fr`, `build123`\n   * Result example: `v1.0.0-beta.1+build123`\n   */\n  private readonly _inputMetadata: string | boolean;\n  /**\n   * `OPTIONAL` Dry Run from Github Action Inputs\n   * If `true`, then it does not actually commit and push the new tag into the repository.\n   * It simply displays the version in the info.\n   * Default: `false`\n   */\n  private readonly _dryRun: boolean;\n  /**\n   * `OPTIONAL` Forced version update.\n   * DANGEROUS-1!!! May be incorrect because in some cases duplicates the version upgrade.\n   * DANGEROUS-2!!! The version in the file may not match what will be in the tags as a result.\n   * If `FALSE`, no automatic promotions will be made.\n   * Default: `false`\n   */\n  private readonly _inputAutoUpVersion: boolean;\n  /**\n   * `OPTIONAL` Release type version.\n   * `major`(X.y.z) or `minor`(x.Y.z) or `patch`(x.y.Z).\n   * All variants: `major`, `premajor`, `minor`, `preminor`, `patch`, `prepatch`, `prerelease`.\n   * If not specified, then no version will be incremented.\n   * ---\n   * * DOC: https://github.com/npm/node-semver/blob/main/README.md'\n   */\n  private readonly _inputReleaseType: ReleaseTypeT;\n  /**\n   * The commit SHA that triggered the workflow.\n   * The value of this commit SHA depends on the event that triggered the workflow.\n   * For more information, see\n   * Events that trigger workflows: <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows>.\n   * Example: `ffac537e6cbbf934b08745a378932722df287a53`\n   */\n  private readonly _githubSha: string;\n  /**\n   * The head ref or source branch of the pull request in a workflow run.\n   * This property is only set when the event that triggers a workflow\n   *    run is either `pull_request` or `pull_request_target`.\n   * For example, `feature-branch-1`.\n   */\n  private readonly _githubHeadRef: string;\n  /**\n   * Use latest available tag as source version.\n   * Applies the latest available tag received from the repository for the source version.\n   * If there are no available tags, it takes the version from the `package.json` file\n   */\n  private readonly _inputUseLastTag: boolean;\n\n  constructor(root_path?: string) {\n    this.rootPath = root_path ?? Config.getRootDir();\n    this._inputToken = getInput('token', { required: true });\n    this._inputVersion = getInput('version', { required: false });\n    this._inputUseLastTag = getBooleanInput('uselasttag', { required: false }) ?? false;\n    this._inputPrefix = getInput('prefix', { required: false });\n    this._inputPostfix = getInput('postfix', { required: false });\n    this._inputPostfixNoUpgrade = getBooleanInput('postfixnoup', { required: false }) ?? false;\n    this._inputMetadata = getInput('metadata', { required: false });\n    this._inputReleaseType = getInput('releasetype', { required: false }) as ReleaseTypeT;\n    this._inputAutoUpVersion = getBooleanInput('auto', { required: false }) ?? false;\n    this._dryRun = getBooleanInput('dryrun', { required: false }) ?? false;\n    //\n    this.packageJsonData = this._inputVersion !== undefined && this._inputVersion !== '' ? null : this.getPackageData();\n    // Environments variable\n    this._githubSha = this.setGithabSha(process.env.GITHUB_SHA);\n    this._githubHeadRef =\n      process.env.GITHUB_HEAD_REF && process.env.GITHUB_HEAD_REF !== '' ? process.env.GITHUB_HEAD_REF : 'main';\n  }\n\n  /**\n   * Get root actions directory\n   * @returns {string} node project root path for action\n   */\n  get root(): string {\n    return this.rootPath;\n  }\n\n  /**\n   * Get token from Github Action input `token`\n   * @returns {string} github action token\n   */\n  get token(): string {\n    return this._inputToken;\n  }\n\n  /**\n   * Get node project actual version\n   * @returns {string} version from `package.json` file\n   */\n  get version(): string {\n    if (this._inputVersion !== undefined && this._inputVersion !== '') return this._inputVersion;\n    if (this.packageJsonData !== null && this.packageJsonData.version !== undefined)\n      return this.packageJsonData.version;\n    return this.defaultVersion;\n  }\n\n  /**\n   * Set node project actual version\n   * @param {string} new_version New version for source. Example: `v1.5.7-release`\n   */\n  set version(new_version: string) {\n    this._inputVersion = new_version;\n  }\n\n  /**\n   * Get release type from Github Action Inputs\n   * @returns {ReleaseTypeT | null} release type `major`, `minor`, `patch` or null\n   */\n  get releaseType(): ReleaseTypeT | null {\n    if (!this.checkReleaseType(this._inputReleaseType) || this._inputReleaseType === '') return null;\n    return this._inputReleaseType;\n  }\n\n  /**\n   * Get Prefix from Github Action Inputs\n   * @returns {string | null} Prefix before version. Example: `v`. Result example: `v1.0.0`\n   */\n  get prefix(): string | null {\n    if (this._inputPrefix === '') return null;\n    return this._inputPrefix;\n  }\n\n  /**\n   * Get Postfix from Github Action Inputs\n   * @returns {string | null} Postfix after version. Example: `-beta`. Result example: `1.0.0-beta`\n   */\n  get postfix(): string | null {\n    if (this._inputPostfix === '') return null;\n    return this._inputPostfix;\n  }\n\n  /**\n   * Get Postfix No Upgrade version flag\n   * @returns {boolean} Postfix No Upgrade version flag. Default: `false`\n   */\n  get postfixNoUpgrade(): boolean {\n    return this._inputPostfixNoUpgrade;\n  }\n\n  /**\n   * Get additional metadata from Github Action Inputs\n   * @returns {string | boolean | undefined} Metadata. Example: `+build123`. Result example: `v1.0.0-beta.1+build123`\n   */\n  get metadata(): string | boolean {\n    if (this._inputMetadata === undefined || this._inputMetadata === '') return false;\n    return this._inputMetadata;\n  }\n\n  /**\n   * Get Dry Run from Github Action Inputs.\n   * If `true`, then it does not actually commit and push the new tag into the repository.\n   * It simply displays the version in the info.\n   * @returns {boolean} Dry Run flag. Default: `false`\n   */\n  get dryRun(): boolean {\n    return this._dryRun;\n  }\n\n  /**\n   * Get Auto up version from Github Action Inputs.\n   * If true, the version will be forcibly upgraded again. Use may result in double upgrade. Use with caution!\n   * @returns {boolean} Auto up version flag. Default: `false`\n   */\n  get autoUp(): boolean {\n    return this._inputAutoUpVersion;\n  }\n\n  /**\n   * Get commit SHA that triggered the workflow.\n   * @returns {string} Github SHA. Exampe: `ffac537e6cbbf934b08745a378932722df287a53`\n   */\n  get githubSha(): string {\n    return this._githubSha;\n  }\n\n  /**\n   * Get head ref or source branch of the pull request in a workflow run.\n   * @returns {string} Head ref or source branch. Example: `feature-branch-1`\n   */\n  get githubHeadRef(): string {\n    return this._githubHeadRef;\n  }\n\n  /**\n   * Get Use latest available tag as source version\n   * @returns {boolean} Use latest available tag flag. Default: `false`\n   */\n  get useLastTag(): boolean {\n    return this._inputUseLastTag;\n  }\n\n  /**\n   * Determining the Project Root Path\n   * * Github variables: <https://docs.github.com/en/actions/learn-github-actions/variables>\n   * @returns {string} application root path\n   */\n  private static getRootDir(): string {\n    if (env.GITHUB_WORKSPACE !== undefined && env.GITHUB_WORKSPACE !== '') {\n      const finalCurrentDir = normalize(env.GITHUB_WORKSPACE);\n      info(`Root directory: ${finalCurrentDir}`);\n      return finalCurrentDir;\n    }\n    const filename: string = fileURLToPath(pathToFileURL(__filename).toString());\n    const dir = dirname(filename);\n    let currentDir: string = dir;\n    while (!existsSync(join(currentDir, 'package.json'))) {\n      currentDir = join(currentDir, '..');\n    }\n    const finalCurrentDir = normalize(currentDir);\n    info(`Root directory: ${finalCurrentDir}`);\n    return finalCurrentDir;\n  }\n\n  /**\n   * Get JSON data from package.json file\n   * @returns {PackageJson} JSON object from package.json\n   */\n  private getPackageData(): PackageJson {\n    const packageData: string = readFileSync(normalize(join(this.rootPath, 'package.json')), 'utf-8');\n    return JSON.parse(packageData);\n  }\n\n  /**\n   * Check Input Release type in correct range\n   */\n  private checkReleaseType(type: string): type is ReleaseTypeT {\n    return ['major', 'minor', 'patch', 'premajor', 'preminor', 'prepatch', 'prerelease', ''].includes(type);\n  }\n\n  /**\n   * Set Github commit SHA that triggered the workflow\n   * @param {string | undefined} github_sha Example: `ffac537e6cbbf934b08745a378932722df287a53`\n   * @returns {string} Failed or SHA\n   */\n  private setGithabSha(github_sha: string | undefined): string {\n    if (github_sha !== undefined && github_sha !== '') {\n      return github_sha;\n    }\n    setFailed('GITHUB_SHA is Empty!!!');\n    return '';\n  }\n}\n\nexport { Config };\n","import { setFailed, warning, info } from '@actions/core';\nimport { context, getOctokit } from '@actions/github';\nimport { GitHub } from '@actions/github/lib/utils';\n//\nimport type {\n  TagResponseT,\n  TagDataT,\n  CreateTagResponseT,\n  CompareCommitsResponseT,\n  CommitDataT,\n  CreateRefResponseT\n} from '../types';\n\n/**\n * Github class\n * Used Octokit package. Based on GitHub API:\n * * DOC: https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables\n * * DOC: https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-repository-tags\n * * DOC: https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28#compare-two-commits\n * * DOC: https://docs.github.com/en/rest/git/tags?apiVersion=2022-11-28#create-a-tag-object\n * * DOC: https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#create-a-reference\n */\nclass Github {\n  /**\n   * Githab repository context object\n   * `{ owner, repo }`\n   */\n  // private readonly contextRepo: Context['repo'];\n  /**\n   * Github repository context Owner\n   */\n  private readonly owner: string;\n  /**\n   * Github repository context Repo\n   */\n  private readonly repo: string;\n  /**\n   * Githab Octokit Api client instance\n   */\n  private readonly _client: InstanceType<typeof GitHub>;\n  /**\n   * Tags in Github repository\n   */\n  private _tags: string[];\n  private _message: string;\n\n  constructor(token: string) {\n    this.owner = context.repo.owner;\n    this.repo = context.repo.repo;\n    this._client = getOctokit(token);\n    this._tags = [];\n    this._message = '';\n  }\n\n  /**\n   * Get Tags Github repository\n   * @returns {string[]} Tags `array`\n   */\n  get tags(): string[] {\n    return this._tags;\n  }\n\n  /**\n   * Get special message for new version tag\n   * @returns {string} Builded message or stub\n   */\n  get message(): string {\n    return this._message;\n  }\n\n  /**\n   * Get Repository Tags\n   * * DOC: https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-repository-tags\n   * @returns @returns {string[]} Tags `array`\n   */\n  async getTags(): Promise<string[]> {\n    try {\n      const repoTags: TagResponseT = await this._client.rest.repos.listTags({\n        owner: this.owner,\n        repo: this.repo,\n        per_page: 100\n      });\n      const tags: string[] = repoTags.data.map((tagData: TagDataT) => {\n        return tagData.name;\n      });\n      if (tags.length > 0) {\n        this._tags = tags;\n        info(`Tags received ${JSON.stringify(this._tags)}`);\n      } else info('Tags not received from github repo');\n      return this._tags;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      setFailed(error.message);\n      return [];\n    }\n  }\n\n  /**\n   * Commit and Push GitHub tag + reference\n   * * DOC: https://docs.github.com/en/rest/git/tags?apiVersion=2022-11-28#create-a-tag-object\n   * * DOC: https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#create-a-reference\n   * @param {string} new_tag - New version tag\n   * @param {string} github_sha - Github commit SHA that triggered the workflow\n   * @param {string} github_head_ref - Github head ref or source branch of the pull request in a workflow run\n   */\n  async pushNewTag(new_tag: string, github_sha: string, github_head_ref: string): Promise<void> {\n    try {\n      // Get message\n      const message: string = await this.getMessage(new_tag, github_head_ref);\n      // Create tag\n      const createTag: CreateTagResponseT = await this._client.rest.git.createTag({\n        owner: this.owner,\n        repo: this.repo,\n        tag: new_tag,\n        message,\n        object: github_sha,\n        type: 'commit'\n      });\n      info(`Create new tag: \"${createTag.data.tag}\" SHA: \"${createTag.data.sha}\"`);\n      // Create reference\n      const reference: CreateRefResponseT = await this._client.rest.git.createRef({\n        owner: this.owner,\n        repo: this.repo,\n        ref: `refs/tags/${createTag.data.tag}`,\n        sha: createTag.data.sha\n      });\n      info(`Create reference for tag: ${reference.data.ref} (${reference.data.url})`);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      setFailed(error.message);\n    }\n  }\n\n  /**\n   * Get special message for new version tag\n   * * DOC: https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28#compare-two-commits\n   * @returns {string} Builded message or stub\n   */\n  private async getMessage(new_tag: string, github_head_ref: string): Promise<string> {\n    try {\n      const changelog: CompareCommitsResponseT = await this._client.rest.repos.compareCommits({\n        owner: this.owner,\n        repo: this.repo,\n        base: this._tags.shift() ?? '',\n        head: github_head_ref\n      });\n      const message: string = changelog.data.commits\n        .map((commit_data: CommitDataT, index: number) => {\n          let messageElement = index === 0 ? '\\n' : '';\n          messageElement += `${index + 1}) [${commit_data.author ? commit_data.author.login : ''}]: `;\n          messageElement += `${commit_data.commit.message}`;\n          messageElement += '\\n';\n          messageElement += `SHA: ${commit_data.sha}`;\n          messageElement += '\\n';\n          return messageElement;\n        })\n        .join('\\n');\n      info(`Build message ok for ${new_tag}`);\n      this._message = message;\n      return message;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      warning(`Error get message from compare commits \"${error.message}\". Return stub message.`);\n      const message = `Version: ${new_tag}`;\n      this._message = message;\n      return message;\n    }\n  }\n}\n\nexport { Github };\n","import { setFailed, setOutput, info } from '@actions/core';\n//\nimport { Config } from './config';\nimport { Tag } from './tag';\nimport { Github } from './github';\n\nclass Main {\n  /**\n   * Config class instance\n   */\n  private readonly _config: Config;\n  /**\n   * Github class instance\n   */\n  private readonly _github: Github;\n\n  constructor(root_path?: string) {\n    this._config = new Config(root_path);\n    this._github = new Github(this._config.token);\n  }\n\n  /**\n   * Get github builder\n   * @returns {Github} Github instance builder object\n   */\n  get github(): Github {\n    return this._github;\n  }\n\n  /**\n   * Get config builder\n   * @returns {Config} Config instance builder object\n   */\n  get config(): Config {\n    return this._config;\n  }\n\n  /**\n   * Main run function.\n   * * get tags(last tag) from repo\n   * * create new tag\n   * * check new tag is exists in repo (=> failed)\n   * * if dry run - only output\n   * * else push tag in repo and output\n   */\n  async run(): Promise<void> {\n    try {\n      // let newTag: string | null = null;\n      // get tags(last tag) from repo\n      const repoTags: string[] = await this._github.getTags();\n      // set version from last tag if use last tag is enabled\n      if (this._config.useLastTag && repoTags && repoTags.length > 0) {\n        this._config.version = repoTags[0];\n      }\n      // build and create new tag\n      const tagBuilder: Tag = new Tag(\n        this._config.version,\n        this._config.useLastTag === false ? (repoTags.length > 0 ? repoTags[0] : null) : null,\n        this._config.prefix,\n        this._config.postfix,\n        this._config.postfixNoUpgrade,\n        this._config.metadata,\n        this._config.releaseType,\n        this._config.autoUp\n      );\n      const newTag: string = tagBuilder.buildNewTag();\n      // check new tag is exists in repo (=> failed)\n      if (repoTags && repoTags.length > 0) {\n        if (repoTags.includes(newTag)) throw new Error(`Tag \"${newTag}\" is already exists in repository!!!`);\n      }\n      // if dry run - only output\n      if (this._config.dryRun) {\n        info(`Dry Run is enabled. Just output new tag version \"${newTag}\" ...`);\n        setOutput('newtag', newTag);\n        return;\n      }\n      // else push tag in repo and output\n      await this._github.pushNewTag(newTag, this._config.githubSha, this._config.githubHeadRef);\n      info(`Pushed new tag \"${newTag}\" is OK. Work done`);\n      setOutput('newtag', newTag);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      setFailed(error.message);\n    }\n  }\n}\n\nexport { Main };\n","import { createHmac } from 'node:crypto';\nimport { inc, clean, parse } from 'semver';\nimport { setFailed, info } from '@actions/core';\n//\nimport type { SemVer } from 'semver';\nimport type { ReleaseTypeT } from '../types';\nimport type { IdentifierBase } from 'semver/functions/inc';\n\n/**\n * Tagger class\n * * DOC: https://semver.org/\n */\nclass Tag {\n  /**\n   * Input source version.\n   * From Githab Action Input, or `package.json` file\n   * ---\n   * If the version is obtained from the package.json file and postfix is used, then the last tag must be used.\n   * Because only the last tag contains the last postfix index.\n   */\n  private readonly version: string;\n  /**\n   * Last tag from Git repo\n   */\n  private readonly lastTag: string | null;\n  /**\n   * Custom Prefix for version. Example: `v`\n   */\n  private readonly prefix: string | null;\n  /**\n   * Custom Postfix for version. Example: `beta`, `rc`\n   */\n  private readonly postfix: string | null;\n  /**\n   * Start identifier for postfix up\n   * Example: `0` => `v1.0.0-beta.0` | `1` => `v1.0.0-beta.1`\n   * Default: `1`\n   */\n  private readonly startPostfixIdentifier: IdentifierBase;\n  /**\n   * Postfix No Upgrade version flag.\n   * Default: `false`\n   */\n  private readonly postfixNoUp: boolean;\n  /**\n   * Additional metadata for tag\n   * If boolean `true`. Trim SHA commit\n   * Example: `true`, `false` || `build123`\n   * Default: `false`\n   */\n  private readonly metadata: string | boolean;\n  /**\n   * Release type version.\n   * `major`(X.y.z) or `minor`(x.Y.z) or `patch`(x.y.Z).\n   * If not specified, then no version will be incremented.\n   * Default: `null`\n   */\n  private readonly releaseType: ReleaseTypeT | null;\n  /**\n   * Whether to automatically upgrade the version regardless of the committed version in the file.\n   * DANGEROUS!!! The version in the file may not match what will be in the tags as a result.\n   * If `FALSE`, no automatic promotions will be made.\n   * Default: `false`\n   */\n  private readonly auto: boolean;\n  /**\n   * Utility Regexp for get version release type.\n   * major, minor, patch\n   */\n  private readonly versionRegExp: RegExp = /(\\d+)\\.(\\d+)\\.(\\d+)/;\n  /**\n   * Frieze postfix patch version for \"pre\" workaround\n   */\n  private postfixPatchFrieze: string | null;\n\n  constructor(\n    version: string,\n    last_tag?: string | null,\n    prefix?: string | null,\n    postfix?: string | null,\n    postfix_no_up?: boolean,\n    metadata?: string | boolean,\n    release_type?: ReleaseTypeT | null,\n    auto?: boolean\n  ) {\n    this.version = version;\n    this.lastTag = last_tag ?? null;\n    this.prefix = prefix ?? null;\n    this.postfix = postfix ?? null;\n    this.postfixNoUp = postfix_no_up ?? false;\n    this.metadata = metadata ?? false;\n    this.releaseType = release_type ?? null;\n    this.auto = auto ?? false;\n    //\n    this.startPostfixIdentifier = '1';\n    this.postfixPatchFrieze = null;\n  }\n\n  /**\n   * New tag builder\n   * @returns {string} New tag / version\n   */\n  buildNewTag(): string {\n    let newVersion: string = this.upVersion();\n    newVersion = this.upPostfix(newVersion);\n    if (this.prefix !== null) newVersion = `${newVersion !== '' ? this.prefix : ''}${newVersion}`;\n    newVersion += this.getMetadata(newVersion);\n    return newVersion;\n  }\n\n  /**\n   * Up Version\n   * If AUTO `true`: major, minor, patch or prerelease\n   * If AUTO `false` - no up version (Manual)\n   * @returns {string} Updated version or not changed version\n   */\n  private upVersion(): string {\n    try {\n      //\n      // Clear version. Prefix remove\n      const version: string | null = clean(this.version);\n      info(`Now version: ${version}`);\n      if (version === null) throw new Error(`Error clean version \"${this.version}\"`);\n      //\n      // Get patch version for frieze\n      if (this.postfix !== null && this.postfix !== '' && this.releaseType === null) {\n        const versionMatch: RegExpMatchArray | null = version.match(this.versionRegExp);\n        if (versionMatch !== null) this.postfixPatchFrieze = String(versionMatch[3]);\n      }\n      //\n      // Update version\n      // If version prerelease change to release version\n      // Example: 3.0.0-dev.1 => 3.0.0\n      if (this.releaseType !== null && this.releaseType !== '') {\n        const updatedVersion: string | null = inc(version, this.releaseType);\n        if (updatedVersion !== null) {\n          //\n          // If necessary, in addition to conversion, upgrade the version\n          // Example minor: 3.0.0-dev.1 => 3.0.0 => 3.1.0\n          // !!! Not used when using postfix !!!\n          if (this.auto && this.postfix === null) {\n            const upVersion: string | null = inc(updatedVersion, this.releaseType);\n            if (upVersion !== null) {\n              return upVersion;\n            }\n          }\n          return updatedVersion;\n        }\n      }\n      return version;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      setFailed(error.message);\n      return '';\n    }\n  }\n\n  /**\n   * Up Version postfix number.\n   * Start identifier = `1`.\n   * Example: `v1.0.0-rc.3` => `v1.0.0-rc.4` | `v1.0.0` => `v1.0.0-rc.1`\n   * !!!NOTE!!! The \"pre\" operation is not available for use in typescript.\n   * There is no basic option NOT to upgrade the patch version.\n   * A workaround needs to be applied.\n   * @param {string} version - Base version\n   * @returns {string} Version with updated postfix\n   */\n  private upPostfix(version: string): string {\n    // If postfix enabled\n    if (this.postfix !== null && this.postfix !== '') {\n      // If las tag exists postfix, change version. Get postfix from last tag\n      version = this.setPostfixForBaseVersion(version);\n      // next\n      const identifier: false | IdentifierBase | undefined = this.postfixNoUp ? false : this.startPostfixIdentifier;\n      const versionUpPostfix: string | null = inc(version, 'prerelease', this.postfix, identifier);\n      if (versionUpPostfix === null) return version;\n      // bring back the patch version\n      if (this.postfixPatchFrieze !== null)\n        return versionUpPostfix.replace(this.versionRegExp, `$1.$2.${this.postfixPatchFrieze}`);\n      return versionUpPostfix;\n    }\n    return version;\n  }\n\n  /**\n   * Get new Metadata based on SHA1 version hash\n   * @param {string} version - Base version\n   * @returns {string} Metadata.\n   * If `true`: return SHA1 sliced hash. Example: `+f05d261f`.\n   * If `false`: return empty string.\n   * If custom string - return as is\n   */\n  private getMetadata(version: string): string {\n    if (this.metadata === true) {\n      const hash = createHmac('sha1', version).digest('hex').slice(0, 8);\n      return `+${hash}`;\n    } else if (typeof this.metadata === 'string' && this.metadata.length > 0) {\n      return `+${this.metadata}`;\n    }\n    return '';\n  }\n\n  /**\n   * Set postfix for base version\n   * @param {string} version Raw version (from package.json - example 2.0.0)\n   * @returns {string} postfixed version if set postfix and last tag is exists\n   */\n  private setPostfixForBaseVersion(version: string): string {\n    // If las tag exists postfix, change version. Get postfix from last tag\n    if (this.lastTag !== null && this.lastTag !== '') {\n      const parseVersion: SemVer | null = parse(version);\n      const parseLastTag: SemVer | null = parse(this.lastTag);\n      if (parseLastTag !== null && parseVersion !== null) {\n        if (\n          parseVersion.major === parseLastTag.major &&\n          parseVersion.minor === parseLastTag.minor &&\n          parseVersion.patch === parseLastTag.patch\n        ) {\n          // Parse version prerelease\n          // [] - if example v2.0.0\n          // ['dev'] - if example v2.0.0-dev\n          // ['dev', 1] - if example v2.0.0-dev.1\n          if (parseLastTag.prerelease.length > 0 && parseLastTag.prerelease[0] !== undefined) {\n            version += `-${parseLastTag.prerelease[0]}`;\n          }\n          if (parseLastTag.prerelease.length > 0 && parseLastTag.prerelease[1] !== undefined) {\n            version += `.${parseLastTag.prerelease[1]}`;\n          }\n        }\n      }\n    }\n    return version;\n  }\n}\n\nexport { Tag };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Main } from './class/main';\n\nnew Main().run();\n"],"names":[],"sourceRoot":""}